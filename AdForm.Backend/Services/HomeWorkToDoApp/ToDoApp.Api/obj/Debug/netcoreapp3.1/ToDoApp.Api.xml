<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToDoApp.Api</name>
    </assembly>
    <members>
        <member name="T:ToDoApp.Api.AuthorizeAttribute">
            <summary>
            Authorization attribute.
            </summary>
        </member>
        <member name="M:ToDoApp.Api.AuthorizeAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            Handle onauthorization.
            </summary>
            <param name="context">Authorization filter context.</param>
        </member>
        <member name="M:ToDoApp.Api.Controllers.UserController.Authenticate(ToDoApp.Business.LoginRequestDto,FluentValidation.IValidator{ToDoApp.Business.LoginRequestDto})">
            <summary>
            Takes UserName and Password and generates token on successful authentication.
            </summary>
            <param name="request"></param>
            <param name="validator"></param>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ItemController.#ctor(ToDoApp.Business.IToDoItemAppService)">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="toDoItemAppService"></param>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ItemController.Get(ToDoApp.Business.PaginationParameters)">
            <summary>
             Get all todoitem records.
            </summary>
            <param name="request"></param>
            <returns>Returns Action Result type based on Success or Failure. </returns>
            <response code="200"> Gets all todoitem reecords.</response>
            <response code="404"> A record with the specified todolist ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ItemController.GetItem(System.Int64)">
             <summary>
            Get specific todoitem record.
             </summary>
             <param name="id"></param>
             <returns>Returns Action result type based on Success/Failure.</returns>
             <response code="200"> Gets specific todoitem record.</response>
             <response code="404"> Error: 404 not found.</response>
             <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ItemController.Post(ToDoApp.Business.ToDoItemRequestDto,FluentValidation.IValidator{ToDoApp.Business.ToDoItemRequestDto})">
            <summary>
            Create todoitem record.
            </summary>
            <param name="request"></param>
            <param name="validator"></param>
            <returns>Returns Action result type based on Success/Failure.</returns>
            <response code="201"> Creates todoitem reecord and returns location where it is created.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
            <response code="400"> The provided todoitem id should be positive integer.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ItemController.Put(ToDoApp.Business.UpdateToDoItemRequestDto,System.Int64,FluentValidation.IValidator{ToDoApp.Business.UpdateToDoItemRequestDto})">
            <summary>
             Update specific todoitem record. 
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <param name="validator"></param>
            <returns>Returns ActionResult type based on Success/Failure.</returns>
            <response code="200"> Updates specific todoitem reecord with details provided.</response>
            <response code="404"> A record with the specified todolist ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
            <response code="400"> The provided todoitem id should be positive integer.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ItemController.Patch(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument,System.Int64)">
            <summary>
            Partial update todoitem record with JsonPatch document.
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <returns>Returns Action result type based on Success/Failure.</returns>
            <response code="200"> Updates specific todoitem record with details provided.</response>
            <response code="404"> A record with the specified todolist ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
            <response code="400"> The provided todoitem id should be positive integer.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ItemController.Delete(System.Int64)">
            <summary>
            Delete specific todoItem record.
            </summary>
            <param name="id"></param>
            <returns>Returns Action result type based on Success/Failure.</returns>
            <response code="200"> Deletes specific todoitem reecord.</response>
            <response code="404"> A record with the specified todolist ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ItemController.AssignLabels(ToDoApp.Business.AssignLabelRequestDto,System.Int64,ToDoApp.Business.ILableAppService,FluentValidation.IValidator{ToDoApp.Business.AssignLabelRequestDto})">
            <summary>
            Assign labels to specific todoitem.
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <param name="lableAppService"></param>
            <param name="validator"></param>
            <returns>Ok if successful else not found.</returns>
            <response code="200"> Assigns specified label/s to todoitem record.</response>
            <response code="404"> Error: 404 not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.LabelController.Get">
            <summary>
            Get all label
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.LabelController.GetLabel(System.Int64)">
            <summary>
            Get specific label record.
            </summary>
            <param name="id"></param>
            <returns>Returns Action result" type based on Success/Failure.</returns>
            <response code="200"> Gets specified label.</response>
            <response code="404"> A label with the specified label ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.LabelController.Post(ToDoApp.Business.LabelRequestDto,FluentValidation.IValidator{ToDoApp.Business.LabelRequestDto})">
            <summary>
            Create Label record.
            </summary>
            <param name="request"></param>
            <param name="validator"></param>
            <returns>Returns Action result type based on Success/Failure.</returns>
            <response code="201"> Creates Label and returns location where it is created.</response>
            <response code="400"> Invalid request format.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.LabelController.Delete(System.Int64)">
            <summary>
            Delete specific label record.
            </summary>
            <param name="id"></param>
            <returns>Returns Action result type based on Success/Failure.</returns>
            <response code="200"> Deletes specified label record.</response>
            <response code="404"> A label with the specified label ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ListController.Get(ToDoApp.Business.PaginationParameters)">
            <summary>
            Get all todolist records
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ListController.GetList(System.Int64)">
            <summary>
            Get specific todolist record.
            </summary>
            <param name="id"></param>
            <response code="200"> Gets specific todolist record.</response>
            <response code="404"> A record with the specified todolist ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ListController.Post(ToDoApp.Business.ToDoListRequestDto,FluentValidation.IValidator{ToDoApp.Business.ToDoListRequestDto})">
             <summary>
             Create todolist record.
             </summary>
             <param name="request"></param>
             <param name="validator"></param>
             <returns>Returns Action result type based on Success/Failure.</returns>
             /// <remarks>
             Sample request:
            
                 POST /List
                 {
                    "ListName": List1
                 }
            
             </remarks>
             <response code="201"> Creates todolist record and returns the location where created.</response>
             <response code="401"> Authorization information is missing or invalid.</response>
             <response code="400"> Any request parameter is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ListController.Put(ToDoApp.Business.ToDoListRequestDto,System.Int64,FluentValidation.IValidator{ToDoApp.Business.ToDoListRequestDto})">
            <summary>
            Update specific todolist record.
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <param name="validator"></param>
            <returns>Returns ActionResult type based on Success/Failure.</returns>
            <response code="200"> Updates specific todolist record with details provided.</response>
            <response code="404"> A record with the specified todolist ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
            <response code="400"> Any request parameter is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ListController.Delete(System.Int64)">
            <summary>
            Delete specific todolist record.
            </summary>
            <param name="id"></param>
            <returns>Returns Action result type based on Success/Failure.</returns>
            <response code="200"> Deletes specific todolist record.</response>
            <response code="404"> A record with the specified todolist ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ListController.Patch(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument,System.Int64)">
            <summary>
            Partial update specific todolist record with JsonPatch document.
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <returns>Returns Action result type based on Success/Failure.</returns>
            <response code="200"> Updates specific todolist record with details provided.</response>
            <response code="404"> A record with the specified todolist ID was not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
            <response code="400"> Any request parameter is missing or invalid.</response>
        </member>
        <member name="M:ToDoApp.Api.Controllers.V1.ListController.AssignLabels(ToDoApp.Business.AssignLabelRequestDto,System.Int64,ToDoApp.Business.ILableAppService,FluentValidation.IValidator{ToDoApp.Business.AssignLabelRequestDto})">
            <summary>
            Assign labels to specific todolist.
            </summary>
            <param name="request"></param>
            <param name="id"></param>
            <param name="lableAppService"></param>
            <param name="validator"></param>
            <returns>Ok if successful else not found.</returns>
            <response code="200"> Assigns specified label/s to todolist record.</response>
            <response code="404"> Error: 404 not found.</response>
            <response code="401"> Authorization information is missing or invalid.</response>
        </member>
        <member name="T:ToDoApp.Api.LabelType">
            <summary>
            Label type mapped to LabelDto types for GraphQl.
            </summary>
        </member>
        <member name="T:ToDoApp.Api.ListsType">
            <summary>
            Lists type mapped to ListDto types for GraphQl.
            </summary>
        </member>
        <member name="T:ToDoApp.Api.Mutation">
            <summary>
            Mutation class for GraphQl.
            </summary>
        </member>
        <member name="M:ToDoApp.Api.Mutation.#ctor(ToDoApp.Business.ILableAppService,ToDoApp.Business.IToDoItemAppService,ToDoApp.Business.IToDoListAppService)">
            <summary>
            Create new instance of <see cref="T:ToDoApp.Api.Mutation"/> class.
            </summary>
            <param name="lableAppService"> Label Service</param>
            <param name="toDoItemAppService"> ToDoItem Service</param>
            <param name="toDoListAppService">List service</param>
            <param name="mapper">Auto mapper</param>
        </member>
        <member name="M:ToDoApp.Api.Mutation.AddLabel(Microsoft.AspNetCore.Http.IHttpContextAccessor,ToDoApp.Business.LabelRequestDto)">
            <summary>
            Add label
            </summary>
            <param name="contextAccessor"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Mutation.DeleteLabel(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.Int64)">
            <summary>
            Delete Label
            </summary>
            <param name="contextAccessor"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Mutation.AddList(Microsoft.AspNetCore.Http.IHttpContextAccessor,ToDoApp.Business.ToDoListRequestDto)">
            <summary>
            Add list
            </summary>
            <param name="contextAccessor"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Mutation.UpdateList(Microsoft.AspNetCore.Http.IHttpContextAccessor,ToDoApp.Business.UpdateToDoListRequestDto)">
            <summary>
            Update todolist
            </summary>
            <param name="contextAccessor"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Mutation.DeleteList(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.Int32)">
            <summary>
            Delete todolist
            </summary>
            <param name="contextAccessor"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Mutation.AddItem(Microsoft.AspNetCore.Http.IHttpContextAccessor,ToDoApp.Business.ToDoItemRequestDto)">
            <summary>
            Add todoitem
            </summary>
            <param name="contextAccessor"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Mutation.UpdateItem(Microsoft.AspNetCore.Http.IHttpContextAccessor,ToDoApp.Business.UpdateToDoItemRequestDto)">
            <summary>
            Update todoItem
            </summary>
            <param name="contextAccessor"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Mutation.Delete(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.Int32)">
            <summary>
            Delete todoitem
            </summary>
            <param name="contextAccessor"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ToDoApp.Api.Query.#ctor(ToDoApp.Business.ILableAppService,ToDoApp.Business.IToDoItemAppService,ToDoApp.Business.IToDoListAppService)">
            <summary>
            Create new instance of <see cref="T:ToDoApp.Api.Query"/> class
            </summary>
            <param name="lableAppService"> Label Service</param>
            <param name="toDoItemAppService"> ToDoItem Service</param>
            <param name="toDoListAppService">List service</param>
            <param name="mapper">Auto mapper</param>
        </member>
        <member name="M:ToDoApp.Api.Query.Labels(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Get labels.
            </summary>
            <param name="contextAccessor">HttpContext accessor.</param>
            <returns>Returns labels.</returns>
        </member>
        <member name="M:ToDoApp.Api.Query.Items(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Get todoitems.
            </summary>
            <param name="contextAccessor">HttpContext accessor.</param>
            <returns>Returns todoitems.</returns>
        </member>
        <member name="M:ToDoApp.Api.Query.Lists(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Get todolists.
            </summary>
            <param name="contextAccessor">HttpContext accessor.</param>
            <returns>Returns todolists.</returns>
        </member>
    </members>
</doc>
